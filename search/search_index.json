{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Soluble Fusion is in limited beta. If you'd like to participate, contact us . Thank you for helping out! Guides Getting Started Command Line Interface","title":"Home"},{"location":"#home","text":"Soluble Fusion is in limited beta. If you'd like to participate, contact us . Thank you for helping out!","title":"Home"},{"location":"#guides","text":"Getting Started Command Line Interface","title":"Guides"},{"location":"assessments/","text":"Security Assessments Soluble Fusion is a dev-friendly platform that allows your to perform security assessments against a variet of modern DevOps-oriented compnents including: Infrastructure-as-Code Terraform AWS CloudFormation Kubernetes manifests Container Images Secrets detection in source code Dependency analysis for Python, Node, and Java platforms Cloud security posture management checks of your AWS Runtime and more... Soluble runs these assessments locally in your development environemnt or in CI. You can, optionally, send the results of these assessments to our SaaS platform for reporting, ticketing, prioritization and notification. If you have an existing investment in the leasing open-source assessment tools, we let you leverage that investment and build an operationalized security program around. We give you flexibility to run one or more of such tools of your choice, to provide maximum security coverage of your infrastructure and to give you freedom from vendor lock-in. If you want us to integrate with any other tools or solutions, please let us know by emailing the support . How It Works The soluble CLI takes care of downloading the underlying assessment tool and executing it for you. We then take the assessment results and send it to our SaaS platform along with contextual inforamtion about the asessments such as the git repository, branch, commit, and CI pipline in which it was executed. For assessment tools that offer a static binary distribution, such as those written in Golang, the CLI will obtain the asssessment tool from the upstream distribution point, typically, GitHub Release. For assessments that have complex dependencies that complicate installation (Node, Python, Ruby, etc) we use a containerized version of the tool to make it easier to manage. If you don't have Docker available and wish to install the underlying tool natively yourself, you can do that with the --tool-path <tool> option. If you omit that option, Docker will be used. We do not send your data to our SaaS platform. In some cases, the assessment tools will send snippits of source fragments (Secrets detection does not!), but we do not send anything more than that. Once the assessment has been sent to the SaaS platform, it can be viewed in the web UI, and is availble for integraiton with alert management, JIRA ticketing an Slack notification. Prerequisites You should have the Soluble CLI installed and a Soluble Fusion authentication token. Instructions for this can be found on the CLI Configuration Guide . Infrastructure-as-Code In all of the examples below, the --uplaod option is optional. If you specify it and you have an API token configured for your CLI, the results will be sent to Soluble Fusion. CloudFormation Checkov Checkov is one of the better infrastructure-as-code asessment tools. It is written in Python, is easily extensible, and has support CloudFormation, Terrafrom and Kubernetes. To run an assesmsent of your cloudformation by running the following: soluble cfn-scan checkov --upload cfn-python-lint cfn-lint is a popular commmunity OSS tool sponsored in part by AWS. soluble cfn-scan cfn-pyhton-lint --upload cfn-nag cfn-nag is an assessment tool originally written by employees of Stelligent. soluble cfn-scan cfn-nag --upload Terraform Checkov As mentioned above, checkov supports Terraform as well. soluble tf-scan checkov --upload TFSec tfsec is an independently-developed OSS assessment tool for Terrafrom. soluble tf-scan tfsec --upload Terrascan soluble tf-scan terrascan --upload Hashicorp Sentinel We are exploring integration with Hashicorp Sentinel . Let us know if you are interested. Other Let us know if there are other flavors of infrastructure-as-code that you would like to integrate. We are considering Ansible, Chef, Puppet, Pulumi and others. Kubernetes To scan a source tree of kubernetes manifests, run the following: soluble k8s-scan --upload At present we only offer checkov support for kubernetes. If you would like to see another asseement tool (there are many!), please let us know. Container Image Scanning Trivy Soluble provides a simple and comprehensive vulnerability scanner for containers and other artifacts based on Trivy . To scan a container image: soluble image-scan <image> [--upload] Other Let us know if there are other image scanning tools that you would like us to support. We have AWS ECR and AWS GCR available, but they are not fully integrated into the CLI. We are happy to provide native support for Clair, Anchore, etc if there is interest. Secrets Detection The Soluble secrets scanner searches through git repositories for secrets. The underlying implementation uses Detect Secrets from Yelp. Plugging this CLI service into the CI provides an easy way to prevent accidental check-in of secrets. soluble secrets-scan [--upload] If there is interest in other secrets detecton engines ( Trufflehog , Shhhgit , etc.) we would be happy to add support. Application Dependency Scanning Python and Node via Trivy Trivy can be used to scan your Python and Node applications for depedencies with vulnerabilities. soluble dep-scan trivy --upload OWASP Dependency Check for JVM Apps If you use OWASP Dependency Check for java applications, you can send the JSON output to Soluble. If you are using Gradle and have the Dependency Check plugin installed, run: gradle dependencyCheckAnalyze This will produce a report in build/reports/dependency-check-report.json You can then send the report to Soluble with: soluble post -m owasp -f build/reports/dependency-check-report.json Note: We are happy to create a wrapper plugin if there is interest. Retire JS We have retirejs support coming to the CLI. Dependabot We are actively looking into integrating GitHub Dependabot into Soluble Fusion. We like Dependabot a lot and use it ourselves. Let us know if you are interested. Infrastructure Scanning Cloudsploit Cloudsploit is a great cloud security scanner from Aqua Security. Cloudsploit supports AWS, GCP, Azure and even Oracle cloud. Soluble has packaged clousdploit as a container image that can be run via Docker or Kubernetes. Run via Docker Note: We are in the process of wrapping this invocation into our CLI to make it less clumsy. However, it is just syntactic sugar to make the tools easier to use. Under the hood it will invoke Cloudsploit as follows. Assuming the soluble CLI is configured and you have AWS credentials in environment variables, run the following: docker run -it --rm \\ -e AWS_ACCESS_KEY_ID \\ -e AWS_SECRET_ACCESS_KEY \\ -e AWS_SESSION_TOKEN \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit If your AWS configuration is in ~/.aws , the following will work as well: docker run -it --rm \\ -v ${HOME}/.aws:/app/.aws \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit Cloudsploit can take a while to run. When it has completed, it will send the results to Soluble Fusion . Run via Kubernetes The following job template will run cloudsploit and send the results to Soluble Fusion. apiVersion: batch/v1 kind: Job metadata: generateName: cloudsploit- spec: template: spec: containers: - image: gcr.io/soluble-repo/soluble-cloudsploit:latest name: cloudsploit imagePullPolicy: Always env: - name: AWS_ACCESS_KEY_ID value: \"\" - name: AWS_SECRET_ACCESS_KEY value: \"\" - name: AWS_SESSION_TOKEN value: \"\" - name: SOLUBLE_API_TOKEN value: \"\" restartPolicy: Never The example above is meant for illustrative purposes only. You should consider using kubernetes secrets or use integrated IAM provide credentials to cloudsploit. Have Soluble Fusion Run It For You Soluble Fusion can execute cloudsploit for you automatically if you delegate the AWS Security Audit role to Soluble. In this case we well schedule cloudsploit for you and feed assessments into Fusion. Prowler We have support for Prowler as well. IAM Assessment We are working on automating AWS and Kubernetes IAM assessments to help make everyone's least-privileged dreams come true. We'd appreciate it if you would let us know if you have specific interest in this.","title":"Security Assessments"},{"location":"assessments/#security-assessments","text":"Soluble Fusion is a dev-friendly platform that allows your to perform security assessments against a variet of modern DevOps-oriented compnents including: Infrastructure-as-Code Terraform AWS CloudFormation Kubernetes manifests Container Images Secrets detection in source code Dependency analysis for Python, Node, and Java platforms Cloud security posture management checks of your AWS Runtime and more... Soluble runs these assessments locally in your development environemnt or in CI. You can, optionally, send the results of these assessments to our SaaS platform for reporting, ticketing, prioritization and notification. If you have an existing investment in the leasing open-source assessment tools, we let you leverage that investment and build an operationalized security program around. We give you flexibility to run one or more of such tools of your choice, to provide maximum security coverage of your infrastructure and to give you freedom from vendor lock-in. If you want us to integrate with any other tools or solutions, please let us know by emailing the support .","title":"Security Assessments"},{"location":"assessments/#how-it-works","text":"The soluble CLI takes care of downloading the underlying assessment tool and executing it for you. We then take the assessment results and send it to our SaaS platform along with contextual inforamtion about the asessments such as the git repository, branch, commit, and CI pipline in which it was executed. For assessment tools that offer a static binary distribution, such as those written in Golang, the CLI will obtain the asssessment tool from the upstream distribution point, typically, GitHub Release. For assessments that have complex dependencies that complicate installation (Node, Python, Ruby, etc) we use a containerized version of the tool to make it easier to manage. If you don't have Docker available and wish to install the underlying tool natively yourself, you can do that with the --tool-path <tool> option. If you omit that option, Docker will be used. We do not send your data to our SaaS platform. In some cases, the assessment tools will send snippits of source fragments (Secrets detection does not!), but we do not send anything more than that. Once the assessment has been sent to the SaaS platform, it can be viewed in the web UI, and is availble for integraiton with alert management, JIRA ticketing an Slack notification.","title":"How It Works"},{"location":"assessments/#prerequisites","text":"You should have the Soluble CLI installed and a Soluble Fusion authentication token. Instructions for this can be found on the CLI Configuration Guide .","title":"Prerequisites"},{"location":"assessments/#infrastructure-as-code","text":"In all of the examples below, the --uplaod option is optional. If you specify it and you have an API token configured for your CLI, the results will be sent to Soluble Fusion.","title":"Infrastructure-as-Code"},{"location":"assessments/#cloudformation","text":"","title":"CloudFormation"},{"location":"assessments/#checkov","text":"Checkov is one of the better infrastructure-as-code asessment tools. It is written in Python, is easily extensible, and has support CloudFormation, Terrafrom and Kubernetes. To run an assesmsent of your cloudformation by running the following: soluble cfn-scan checkov --upload","title":"Checkov"},{"location":"assessments/#cfn-python-lint","text":"cfn-lint is a popular commmunity OSS tool sponsored in part by AWS. soluble cfn-scan cfn-pyhton-lint --upload","title":"cfn-python-lint"},{"location":"assessments/#cfn-nag","text":"cfn-nag is an assessment tool originally written by employees of Stelligent. soluble cfn-scan cfn-nag --upload","title":"cfn-nag"},{"location":"assessments/#terraform","text":"","title":"Terraform"},{"location":"assessments/#checkov_1","text":"As mentioned above, checkov supports Terraform as well. soluble tf-scan checkov --upload","title":"Checkov"},{"location":"assessments/#tfsec","text":"tfsec is an independently-developed OSS assessment tool for Terrafrom. soluble tf-scan tfsec --upload","title":"TFSec"},{"location":"assessments/#terrascan","text":"soluble tf-scan terrascan --upload","title":"Terrascan"},{"location":"assessments/#hashicorp-sentinel","text":"We are exploring integration with Hashicorp Sentinel . Let us know if you are interested.","title":"Hashicorp Sentinel"},{"location":"assessments/#other","text":"Let us know if there are other flavors of infrastructure-as-code that you would like to integrate. We are considering Ansible, Chef, Puppet, Pulumi and others.","title":"Other"},{"location":"assessments/#kubernetes","text":"To scan a source tree of kubernetes manifests, run the following: soluble k8s-scan --upload At present we only offer checkov support for kubernetes. If you would like to see another asseement tool (there are many!), please let us know.","title":"Kubernetes"},{"location":"assessments/#container-image-scanning","text":"","title":"Container Image Scanning"},{"location":"assessments/#trivy","text":"Soluble provides a simple and comprehensive vulnerability scanner for containers and other artifacts based on Trivy . To scan a container image: soluble image-scan <image> [--upload]","title":"Trivy"},{"location":"assessments/#other_1","text":"Let us know if there are other image scanning tools that you would like us to support. We have AWS ECR and AWS GCR available, but they are not fully integrated into the CLI. We are happy to provide native support for Clair, Anchore, etc if there is interest.","title":"Other"},{"location":"assessments/#secrets-detection","text":"The Soluble secrets scanner searches through git repositories for secrets. The underlying implementation uses Detect Secrets from Yelp. Plugging this CLI service into the CI provides an easy way to prevent accidental check-in of secrets. soluble secrets-scan [--upload] If there is interest in other secrets detecton engines ( Trufflehog , Shhhgit , etc.) we would be happy to add support.","title":"Secrets Detection"},{"location":"assessments/#application-dependency-scanning","text":"","title":"Application Dependency Scanning"},{"location":"assessments/#python-and-node-via-trivy","text":"Trivy can be used to scan your Python and Node applications for depedencies with vulnerabilities. soluble dep-scan trivy --upload","title":"Python and Node via Trivy"},{"location":"assessments/#owasp-dependency-check-for-jvm-apps","text":"If you use OWASP Dependency Check for java applications, you can send the JSON output to Soluble. If you are using Gradle and have the Dependency Check plugin installed, run: gradle dependencyCheckAnalyze This will produce a report in build/reports/dependency-check-report.json You can then send the report to Soluble with: soluble post -m owasp -f build/reports/dependency-check-report.json Note: We are happy to create a wrapper plugin if there is interest.","title":"OWASP Dependency Check for JVM Apps"},{"location":"assessments/#retire-js","text":"We have retirejs support coming to the CLI.","title":"Retire JS"},{"location":"assessments/#dependabot","text":"We are actively looking into integrating GitHub Dependabot into Soluble Fusion. We like Dependabot a lot and use it ourselves. Let us know if you are interested.","title":"Dependabot"},{"location":"assessments/#infrastructure-scanning","text":"","title":"Infrastructure Scanning"},{"location":"assessments/#cloudsploit","text":"Cloudsploit is a great cloud security scanner from Aqua Security. Cloudsploit supports AWS, GCP, Azure and even Oracle cloud. Soluble has packaged clousdploit as a container image that can be run via Docker or Kubernetes.","title":"Cloudsploit"},{"location":"assessments/#run-via-docker","text":"Note: We are in the process of wrapping this invocation into our CLI to make it less clumsy. However, it is just syntactic sugar to make the tools easier to use. Under the hood it will invoke Cloudsploit as follows. Assuming the soluble CLI is configured and you have AWS credentials in environment variables, run the following: docker run -it --rm \\ -e AWS_ACCESS_KEY_ID \\ -e AWS_SECRET_ACCESS_KEY \\ -e AWS_SESSION_TOKEN \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit If your AWS configuration is in ~/.aws , the following will work as well: docker run -it --rm \\ -v ${HOME}/.aws:/app/.aws \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit Cloudsploit can take a while to run. When it has completed, it will send the results to Soluble Fusion .","title":"Run via Docker"},{"location":"assessments/#run-via-kubernetes","text":"The following job template will run cloudsploit and send the results to Soluble Fusion. apiVersion: batch/v1 kind: Job metadata: generateName: cloudsploit- spec: template: spec: containers: - image: gcr.io/soluble-repo/soluble-cloudsploit:latest name: cloudsploit imagePullPolicy: Always env: - name: AWS_ACCESS_KEY_ID value: \"\" - name: AWS_SECRET_ACCESS_KEY value: \"\" - name: AWS_SESSION_TOKEN value: \"\" - name: SOLUBLE_API_TOKEN value: \"\" restartPolicy: Never The example above is meant for illustrative purposes only. You should consider using kubernetes secrets or use integrated IAM provide credentials to cloudsploit.","title":"Run via Kubernetes"},{"location":"assessments/#have-soluble-fusion-run-it-for-you","text":"Soluble Fusion can execute cloudsploit for you automatically if you delegate the AWS Security Audit role to Soluble. In this case we well schedule cloudsploit for you and feed assessments into Fusion.","title":"Have Soluble Fusion Run It For You"},{"location":"assessments/#prowler","text":"We have support for Prowler as well.","title":"Prowler"},{"location":"assessments/#iam-assessment","text":"We are working on automating AWS and Kubernetes IAM assessments to help make everyone's least-privileged dreams come true. We'd appreciate it if you would let us know if you have specific interest in this.","title":"IAM Assessment"},{"location":"ci/","text":"CI/CD Integration For most CI environments, the easiest way to install the soluble CLI is to add it to the build job itself. The following command will download and install the CLI on demand. curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh The CLI will be installed in the current directory with the execute bit set. You are welcome to move it somewhere else, but leaving it in the current directory, which should be the checked-out source tree for most CI systems. There are two important environment variables that you should have set: SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID prior to installatin. If they are set at the time the installation script is run, then the file $HOME/.soluble/cli-config.json will be written automatically. You can find these values in from your own ${HOME}/.soluble/cli-config.json that is created when you run soluble login . Note: If you would rather store and distribute ${HOME}/.soluble/cli-config.json yourself, via Secrets Manager or S3 or another mechanism you are free to do so. Failing Builds You can add --fail SEVERITY=THRESHOLD_COUNT for each assessment that you run. If you add --fail high=1 then the build fill fail if more than one High finding is detected. Note that a critical finding will also trigger this failure. The order of finding severity is critical > high > medium > low > info . Note that the --fail flag only works with --upload because the finding severity is provided by Soluble Fusion, not the assessment tool. Failing At End If you are running multiple assessments in a single build job, you might not want to fail at the first assessment. This will prevent subsequent assessments from even running, since the CI platform will terminate execution with a command with a non-zero exit code. So if you would rather fail at the end, add the following: soluble build report --fail high=1 at the end of the build job. This will allow all the previous assessments to be run and reported before triggering a failure. GitHub PR Status Soluble can update GitHUb PR Status Checks if you call soluble update-pr . For this to work, you need to have installed the Soluble GitHub App which enables the CLI to receive github API credentials to post status checks. To do this, while logged in to Soluble, run the following visit the following in your web browser. https://github.com/apps/soluble-fusion . Circle CI The following is an example for Circle CI with inline comments. version: 2.1 workflows: workflow: jobs: - build: # my-env-context is a CircleCI Build Context containing SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID # Circle CI contexts are documented here: https://circleci.com/docs/2.0/contexts/ context: my-env-context jobs: build: machine: # Need to use machine image builders if you intend to use checkov and other assessment tools via docker. # Circle CI builders, by default, do not have docker available to build steps. If you don't have docker available # then you have to manually install assessment tools, which is cumbersome. So using machine image builder # is reccommended. Circle CI documenation is here: https://circleci.com/docs/2.0/executor-intro/ image: ubuntu-1604:202010-01 steps: - checkout # # # Install the CLI, using the values of SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID. Those values are written to # ~/.soluble/cli-config.json - run: \"curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh\" # # # Run tfsec on the files in path/to/terraform/files and upload the results to Soluble Fusion. Will continue # on error, which is probably what you want with multiple assessments. If you want to fail fast on error, add # --fail high=1, which would return a non-zero exit code if there are 1 or more HIGH or CRITICAL errors found. - run: \"soluble tf-scan tfsec -d path/to/terraform/files --upload\" # # Run checkov on path/to/terraform/files and uplaod the results to Soluble Fusion. - run: \"soluble tf-scan checkov -d path/to/terraform/files --upload\" # # Run a secrets scan on the source tree - run: \"soluble secrets-scan --upload\" # Produce a consolidated assessment summary and fail if there are one or more findings in any of the above # assessments. - run: \"soluble build report --fail high=1 An important point with Circle CI is that by default the builders do not have Docker available in build steps. The Soluble CLI prefers to use container image distributions of tools which have complicated depenencies such as checkov. So you should use the machine image option. If you prefer not to do this and are happy to install and maintain checkov and other tools yourself, you can pass --tool-path as an argument to each soluble command. For example, --tool-path checkov would use the checkov available on your PATH. Kubernetes-based CI/CD Kubernetes-based CI/CD platforms such as Tekton, Drone, etc. will typically not have Docker available. In this case you will need to have the tools pre-installed in the container image that you are using for the build execution and use the --tool-path option described above.","title":"CI/CD Integration"},{"location":"ci/#cicd-integration","text":"For most CI environments, the easiest way to install the soluble CLI is to add it to the build job itself. The following command will download and install the CLI on demand. curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh The CLI will be installed in the current directory with the execute bit set. You are welcome to move it somewhere else, but leaving it in the current directory, which should be the checked-out source tree for most CI systems. There are two important environment variables that you should have set: SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID prior to installatin. If they are set at the time the installation script is run, then the file $HOME/.soluble/cli-config.json will be written automatically. You can find these values in from your own ${HOME}/.soluble/cli-config.json that is created when you run soluble login . Note: If you would rather store and distribute ${HOME}/.soluble/cli-config.json yourself, via Secrets Manager or S3 or another mechanism you are free to do so.","title":"CI/CD Integration"},{"location":"ci/#failing-builds","text":"You can add --fail SEVERITY=THRESHOLD_COUNT for each assessment that you run. If you add --fail high=1 then the build fill fail if more than one High finding is detected. Note that a critical finding will also trigger this failure. The order of finding severity is critical > high > medium > low > info . Note that the --fail flag only works with --upload because the finding severity is provided by Soluble Fusion, not the assessment tool.","title":"Failing Builds"},{"location":"ci/#failing-at-end","text":"If you are running multiple assessments in a single build job, you might not want to fail at the first assessment. This will prevent subsequent assessments from even running, since the CI platform will terminate execution with a command with a non-zero exit code. So if you would rather fail at the end, add the following: soluble build report --fail high=1 at the end of the build job. This will allow all the previous assessments to be run and reported before triggering a failure.","title":"Failing At End"},{"location":"ci/#github-pr-status","text":"Soluble can update GitHUb PR Status Checks if you call soluble update-pr . For this to work, you need to have installed the Soluble GitHub App which enables the CLI to receive github API credentials to post status checks. To do this, while logged in to Soluble, run the following visit the following in your web browser. https://github.com/apps/soluble-fusion .","title":"GitHub PR Status"},{"location":"ci/#circle-ci","text":"The following is an example for Circle CI with inline comments. version: 2.1 workflows: workflow: jobs: - build: # my-env-context is a CircleCI Build Context containing SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID # Circle CI contexts are documented here: https://circleci.com/docs/2.0/contexts/ context: my-env-context jobs: build: machine: # Need to use machine image builders if you intend to use checkov and other assessment tools via docker. # Circle CI builders, by default, do not have docker available to build steps. If you don't have docker available # then you have to manually install assessment tools, which is cumbersome. So using machine image builder # is reccommended. Circle CI documenation is here: https://circleci.com/docs/2.0/executor-intro/ image: ubuntu-1604:202010-01 steps: - checkout # # # Install the CLI, using the values of SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID. Those values are written to # ~/.soluble/cli-config.json - run: \"curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh\" # # # Run tfsec on the files in path/to/terraform/files and upload the results to Soluble Fusion. Will continue # on error, which is probably what you want with multiple assessments. If you want to fail fast on error, add # --fail high=1, which would return a non-zero exit code if there are 1 or more HIGH or CRITICAL errors found. - run: \"soluble tf-scan tfsec -d path/to/terraform/files --upload\" # # Run checkov on path/to/terraform/files and uplaod the results to Soluble Fusion. - run: \"soluble tf-scan checkov -d path/to/terraform/files --upload\" # # Run a secrets scan on the source tree - run: \"soluble secrets-scan --upload\" # Produce a consolidated assessment summary and fail if there are one or more findings in any of the above # assessments. - run: \"soluble build report --fail high=1 An important point with Circle CI is that by default the builders do not have Docker available in build steps. The Soluble CLI prefers to use container image distributions of tools which have complicated depenencies such as checkov. So you should use the machine image option. If you prefer not to do this and are happy to install and maintain checkov and other tools yourself, you can pass --tool-path as an argument to each soluble command. For example, --tool-path checkov would use the checkov available on your PATH.","title":"Circle CI"},{"location":"ci/#kubernetes-based-cicd","text":"Kubernetes-based CI/CD platforms such as Tekton, Drone, etc. will typically not have Docker available. In this case you will need to have the tools pre-installed in the container image that you are using for the build execution and use the --tool-path option described above.","title":"Kubernetes-based CI/CD"},{"location":"cinderellas/","text":"Cinderella clusters Soluble Cinderella clusters provide a quick, easy way to explore the kubernetes ecosystem. Create a cluster, deploy containers, and test different configurations. Cinderella clusters are automatically deleted when their times run out. Try Cinderella You won\u2019t have to do this every time you start a Cinderella cluster. Click on the link Click on \"Let's go!\" to get started. Next we need to import one (or more) SSH public keys so we can log in to the node running the cluster. If you have a GitHub account with SSH public keys, Soluble can just import those. That\u2019s what we\u2019ll do here: After clicking on Add , the keys are imported, and we\u2019re taken to the loading page. It takes about a minute for the cluster to spin up. When the cluster is ready, you\u2019ll receive a notification in the upper right corner. When you click Continue , you\u2019ll be taken to the Cinderella Clusters page: Next, we\u2019ll log in to the node running the cluster via SSH. To make this easy, we can copy the SSH command to log in to the node by clicking on the three vertical dots in the Actions column of the row with our Cinderella cluster: Next, open a terminal window, paste the command you copied at the prompt, and hit return. We\u2019ll be asked to confirm the SSH key of the remote host and will get a prompt that looks something like: Run the kubectl command and explore the cluster.","title":"Cinderella clusters"},{"location":"cinderellas/#cinderella-clusters","text":"Soluble Cinderella clusters provide a quick, easy way to explore the kubernetes ecosystem. Create a cluster, deploy containers, and test different configurations. Cinderella clusters are automatically deleted when their times run out. Try Cinderella You won\u2019t have to do this every time you start a Cinderella cluster. Click on the link Click on \"Let's go!\" to get started. Next we need to import one (or more) SSH public keys so we can log in to the node running the cluster. If you have a GitHub account with SSH public keys, Soluble can just import those. That\u2019s what we\u2019ll do here: After clicking on Add , the keys are imported, and we\u2019re taken to the loading page. It takes about a minute for the cluster to spin up. When the cluster is ready, you\u2019ll receive a notification in the upper right corner. When you click Continue , you\u2019ll be taken to the Cinderella Clusters page: Next, we\u2019ll log in to the node running the cluster via SSH. To make this easy, we can copy the SSH command to log in to the node by clicking on the three vertical dots in the Actions column of the row with our Cinderella cluster: Next, open a terminal window, paste the command you copied at the prompt, and hit return. We\u2019ll be asked to confirm the SSH key of the remote host and will get a prompt that looks something like: Run the kubectl command and explore the cluster.","title":"Cinderella clusters"},{"location":"cli/","text":"CLI This is the command line interface (CLI) for interacting with Soluble Fusion. It can be used locally to run assessments and manage your account. It is used in your CI environment to run assessments and report the results to Soluble Fusion. Installation Mac OS The easiest way to install the CLI for MacOS is to use homebrew : brew install soluble-ai/soluble/soluble-cli To upgrade to the latest version: brew upgrade soluble-ai/soluble/soluble-cli Note: Due to Apple's notarization requirements, the brew installation builds the CLI from source. If this is a problem, you can download a precompiled binary from the GitHub Release page . However, you will have to approve it in Apple Preferences. We are working on distributing an Apple-notarized executable. Linux On Linux, run: curl https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh This will install the latest version in the current directory. You will need to move it to an appropriate location on your PATH . Precompiled binaries are also available on the Github Release page . Windows Precompiled binaries are available on GitHub Release page . Please note that our testing on Windows is minimal. Please file a GitHub issue if your run into any problems. Build From Source It's possible to build from source. Assuming you have go installed: git checkout https://github.com/soluble-ai/soluble-cli.git ./hack/build.sh ./soluble version CLI Authentication Integrated Authentication The CLI uses an OAuth flow with your browser to generate an authentication token and configuration. $ soluble login This will open a browser window and walk you through the authentication flow. If you are running the CLI in an environment that does not have access to a browser (i.e. in SSH or interactive container sesssion) you run the auth process in headless mode, with: $ soluble login --headless This will give you a link to copy/paste into your browser. When you have completed the authentication flow, you will copy/paste the authentication code back to the CLI to complete the authentication flow. Manually Obtianing Access Token If you run into problems with the procedure above, you can obtian an access token manaully. Log in to the UI and go to Access Tokens . Generate an access token and then run: $ soluble auth set-access-token --access-token <your-access-token>","title":"CLI"},{"location":"cli/#cli","text":"This is the command line interface (CLI) for interacting with Soluble Fusion. It can be used locally to run assessments and manage your account. It is used in your CI environment to run assessments and report the results to Soluble Fusion.","title":"CLI"},{"location":"cli/#installation","text":"","title":"Installation"},{"location":"cli/#mac-os","text":"The easiest way to install the CLI for MacOS is to use homebrew : brew install soluble-ai/soluble/soluble-cli To upgrade to the latest version: brew upgrade soluble-ai/soluble/soluble-cli Note: Due to Apple's notarization requirements, the brew installation builds the CLI from source. If this is a problem, you can download a precompiled binary from the GitHub Release page . However, you will have to approve it in Apple Preferences. We are working on distributing an Apple-notarized executable.","title":"Mac OS"},{"location":"cli/#linux","text":"On Linux, run: curl https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh This will install the latest version in the current directory. You will need to move it to an appropriate location on your PATH . Precompiled binaries are also available on the Github Release page .","title":"Linux"},{"location":"cli/#windows","text":"Precompiled binaries are available on GitHub Release page . Please note that our testing on Windows is minimal. Please file a GitHub issue if your run into any problems.","title":"Windows"},{"location":"cli/#build-from-source","text":"It's possible to build from source. Assuming you have go installed: git checkout https://github.com/soluble-ai/soluble-cli.git ./hack/build.sh ./soluble version","title":"Build From Source"},{"location":"cli/#cli-authentication","text":"","title":"CLI Authentication"},{"location":"cli/#integrated-authentication","text":"The CLI uses an OAuth flow with your browser to generate an authentication token and configuration. $ soluble login This will open a browser window and walk you through the authentication flow. If you are running the CLI in an environment that does not have access to a browser (i.e. in SSH or interactive container sesssion) you run the auth process in headless mode, with: $ soluble login --headless This will give you a link to copy/paste into your browser. When you have completed the authentication flow, you will copy/paste the authentication code back to the CLI to complete the authentication flow.","title":"Integrated Authentication"},{"location":"cli/#manually-obtianing-access-token","text":"If you run into problems with the procedure above, you can obtian an access token manaully. Log in to the UI and go to Access Tokens . Generate an access token and then run: $ soluble auth set-access-token --access-token <your-access-token>","title":"Manually Obtianing Access Token"},{"location":"cloud-posture/","text":"Cloud Posture Management Cloudsploit Cloudsploit is a great cloud security scanner from Aqua Security. Cloudsploit supports AWS, GCP, Azure and even Oracle cloud. Soluble has packaged clousdploit as a container image that can be run via Docker or Kubernetes. Run via Docker Assuming the soluble CLI is configured and you have AWS credentials in environment variables, run the following: docker run -it --rm \\ -e AWS_ACCESS_KEY_ID \\ -e AWS_SECRET_ACCESS_KEY \\ -e AWS_SESSION_TOKEN \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit If your AWS configuration is in ~/.aws , the following will work as well: docker run -it --rm \\ -v ${HOME}/.aws:/app/.aws \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit Cloudsploit can take a while to run. When it has completed, it will send the results to Soluble Fusion . Run via Kubernetes The following job template will run cloudsploit and send the results to Soluble Fusion. apiVersion: batch/v1 kind: Job metadata: generateName: cloudsploit- spec: template: spec: containers: - image: gcr.io/soluble-repo/soluble-cloudsploit:latest name: cloudsploit imagePullPolicy: Always env: - name: AWS_ACCESS_KEY_ID value: \"\" - name: AWS_SECRET_ACCESS_KEY value: \"\" - name: AWS_SESSION_TOKEN value: \"\" - name: SOLUBLE_API_TOKEN value: \"\" restartPolicy: Never The example above is meant for illustrative purposes only. You should consider using kubernetes secrets or use integrated IAM provide credentials to cloudsploit. Have Soluble Fusion Run It For You Soluble Fusion can execute cloudsploit for you if you add your AWS accounts.","title":"Cloud Posture Management"},{"location":"cloud-posture/#cloud-posture-management","text":"","title":"Cloud Posture Management"},{"location":"cloud-posture/#cloudsploit","text":"Cloudsploit is a great cloud security scanner from Aqua Security. Cloudsploit supports AWS, GCP, Azure and even Oracle cloud. Soluble has packaged clousdploit as a container image that can be run via Docker or Kubernetes.","title":"Cloudsploit"},{"location":"cloud-posture/#run-via-docker","text":"Assuming the soluble CLI is configured and you have AWS credentials in environment variables, run the following: docker run -it --rm \\ -e AWS_ACCESS_KEY_ID \\ -e AWS_SECRET_ACCESS_KEY \\ -e AWS_SESSION_TOKEN \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit If your AWS configuration is in ~/.aws , the following will work as well: docker run -it --rm \\ -v ${HOME}/.aws:/app/.aws \\ -v ${HOME}/.soluble:/app/.soluble \\ gcr.io/soluble-repo/soluble-cloudsploit Cloudsploit can take a while to run. When it has completed, it will send the results to Soluble Fusion .","title":"Run via Docker"},{"location":"cloud-posture/#run-via-kubernetes","text":"The following job template will run cloudsploit and send the results to Soluble Fusion. apiVersion: batch/v1 kind: Job metadata: generateName: cloudsploit- spec: template: spec: containers: - image: gcr.io/soluble-repo/soluble-cloudsploit:latest name: cloudsploit imagePullPolicy: Always env: - name: AWS_ACCESS_KEY_ID value: \"\" - name: AWS_SECRET_ACCESS_KEY value: \"\" - name: AWS_SESSION_TOKEN value: \"\" - name: SOLUBLE_API_TOKEN value: \"\" restartPolicy: Never The example above is meant for illustrative purposes only. You should consider using kubernetes secrets or use integrated IAM provide credentials to cloudsploit.","title":"Run via Kubernetes"},{"location":"cloud-posture/#have-soluble-fusion-run-it-for-you","text":"Soluble Fusion can execute cloudsploit for you if you add your AWS accounts.","title":"Have Soluble Fusion Run It For You"},{"location":"getting-started/","text":"Getting Started Step 1: Log In To Soluble Fusion This is fast and simple, using OpenID Connect. Open a browser to https://app.soluble.cloud Click Create Account Select Google or GitHub indentity providers (let us know if you'd like to see other identity providers) Select your account Agree to Terms of Service Done! Step 2: Install the CLI Follow the instruction to install the CLI in the sidebar. There are more detailed insructions available in the documentation. Step 3: Run your first assessment Enter a directory containing terraform, CloudFormation or Kubernetes manifests and run one of the following: # Terraform $ soluble tf-scan # CloudFormation $ soluble cfn-scan # Kubernetes $ soluble k8s-scan At present the scanners that are available for use are: For Terraform: * checkov - `soluble tf-scan checkov` * tfsec - `soluble tf-scan tfsec` * terrascan - `soluble tf-scan tfsec` For CloudFormation: * cfn-nag - `soluble cfn-scan cfn-nag` * cfn-python-lint - `soluble cfn-scan cfn-python-lint` * checkov - `soluble cfn-scan checkov` For Kubernetes: * checkov - `soluble k8s-scan checkov` _Note: If you are interested in seeing other assessment tools, let us know at support@soluble.ai_ To send the results to Soluble Fusion, add the `--upload` flag. For instance: $ soluble tf-scan --upload ... The output will include a link to the assessment results. ### Notes For tools that depend on a language runtime and installation (i.e. checkov, cfn-lint need python runtime) we use a containerized distribution by default. If you don't have docker available or prefer to use the already-installed version of the assesment tool, you can add `--tool-path <executable>`. So to use the locally installed version of checkov: To use checkov on your PATH: soluble tf-scan checkov --tool-path checkov Sepecify a specific installation: soluble tf-scan checkov --tool-path /usr/local/bin/checkov ```","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#step-1-log-in-to-soluble-fusion","text":"This is fast and simple, using OpenID Connect. Open a browser to https://app.soluble.cloud Click Create Account Select Google or GitHub indentity providers (let us know if you'd like to see other identity providers) Select your account Agree to Terms of Service Done!","title":"Step 1: Log In To Soluble Fusion"},{"location":"getting-started/#step-2-install-the-cli","text":"Follow the instruction to install the CLI in the sidebar. There are more detailed insructions available in the documentation.","title":"Step 2: Install the CLI"},{"location":"getting-started/#step-3-run-your-first-assessment","text":"Enter a directory containing terraform, CloudFormation or Kubernetes manifests and run one of the following: # Terraform $ soluble tf-scan # CloudFormation $ soluble cfn-scan # Kubernetes $ soluble k8s-scan At present the scanners that are available for use are: For Terraform: * checkov - `soluble tf-scan checkov` * tfsec - `soluble tf-scan tfsec` * terrascan - `soluble tf-scan tfsec` For CloudFormation: * cfn-nag - `soluble cfn-scan cfn-nag` * cfn-python-lint - `soluble cfn-scan cfn-python-lint` * checkov - `soluble cfn-scan checkov` For Kubernetes: * checkov - `soluble k8s-scan checkov` _Note: If you are interested in seeing other assessment tools, let us know at support@soluble.ai_ To send the results to Soluble Fusion, add the `--upload` flag. For instance: $ soluble tf-scan --upload ... The output will include a link to the assessment results. ### Notes For tools that depend on a language runtime and installation (i.e. checkov, cfn-lint need python runtime) we use a containerized distribution by default. If you don't have docker available or prefer to use the already-installed version of the assesment tool, you can add `--tool-path <executable>`. So to use the locally installed version of checkov:","title":"Step 3: Run your first assessment"},{"location":"getting-started/#to-use-checkov-on-your-path","text":"soluble tf-scan checkov --tool-path checkov","title":"To use checkov on your PATH:"},{"location":"getting-started/#sepecify-a-specific-installation","text":"soluble tf-scan checkov --tool-path /usr/local/bin/checkov ```","title":"Sepecify a specific installation:"},{"location":"git-repos/","text":"Repositories The Soluble Repositories view provides a clear, real-time view of the security posture of a repository. It's a single pane of glass to view results of all the static code analysis, image scanning and secrets scanning. Using the Soluble CLI inventory scanner, you get a list of what kinds of files the repository contains and their corresponding assessment results. The repository view also provides an easy way to view assessment reports for all the recent git branches, and it also allows you to view a diff between two commits of a repo. This allows you to make decisions based on the security posture of a repository.","title":"Repositories"},{"location":"git-repos/#repositories","text":"The Soluble Repositories view provides a clear, real-time view of the security posture of a repository. It's a single pane of glass to view results of all the static code analysis, image scanning and secrets scanning. Using the Soluble CLI inventory scanner, you get a list of what kinds of files the repository contains and their corresponding assessment results. The repository view also provides an easy way to view assessment reports for all the recent git branches, and it also allows you to view a diff between two commits of a repo. This allows you to make decisions based on the security posture of a repository.","title":"Repositories"},{"location":"integration/","text":"Integrations CI To install soluble in your CI environment, use the following command, which can be specified as a build step. curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh The CLI will be installed in the current directory with the execute bit set. You are welcome to move it somewhere else, but leaving it in the current directory works well with all of the modern CI platforms. The following is an example for Circle CI: version: 2.1 workflows: workflow: jobs: - build: context: my-env-context jobs: build: machine: image: ubuntu-1604:202010-01 steps: - checkout - run: \"curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh\" - run: \"soluble tf-scan tfsec --upload\" - run: \"soluble tf-scan checkov --upload\" - run: \"soluble secrets-scan --upload\" In order to communicate with the Soluble Fusion platform, the CLI needs an API token, which it expects to find in ~/.soluble/cli-config.json . The file will typically look something like this: { \"Profiles\": { \"default\": { \"APIServer\": \"https://api.soluble.cloud\", \"APIToken\": \"<SOLUBLE_API_TOKEN>\", \"TLSNoVerify\": false, \"Organization\": \"<SOLUBLE_ORG_ID>\", \"Email\": \"email@example.com\", \"DefaultClusterID\": \"\" } }, \"CurrentProfile\": \"default\", \"ModelLocations\": null } You have two choices to configure this: 1) Set SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID as secrets in your CI platform. When you run the installation curl command above, ~/.soluble/cli-config.json will be configured automatically. In the example above, with Circle CI, these values were stored in a Context named my-env-context . If you are using GitHub Actions, you can use GitHub Secrets . There is no magic here. When the CLI is installed, it just uses these values to write its configuration file. or 2) If you want to handle this yourself, just make sure that cli-config.json is distributed and placed in ~/.soluble/cli-config.json using your preferred mechanism for this kind of thing. GitHub Actions We have some first-class support for GitHub Actions. Contact us for details. Circle CI, Jenkins, GitLabl, Buildkite, Tekton etc. The instructions above should be sufficient in most cases. The Soluble CLI will extract the CI platform-specific environment variables for relevant contextual data (Git commit, Git branch, CI pipeline name, etc) and send that metadata to the Fusion platform. If you are interested in a Circle CI Orb or other first-class support for CI integration, let us know. Source Control GitHub If you have the official GitHub CLI installed and configured on your machine, you can use its credentials to crawl all of the repos available to you. It will clone each of the available repos, identifiy where there IaC in those repos and send that metadata back to Soluble. soluble inventory github If you aren't using GitHub or don't have that capability available to you, you can run the inventory on a repo-by-repo basis by running the following from a cloned git repo: soluble inventory local Soluble GitHub App We provide a GitHub App that can be installed to your GitHub organization. This app allows the CLI to post status checks to GitHub PRs from CI. To in install the app: Log in to Soluble Go to https://github.com/apps/soluble-fusion and follow the instructions Once installed you can add soluble build update-pr to your CI job that performs the assessments. The CLI will obtain an ephemeral token, and post status checks to the GitHub pull request, if one exists. Note: This GitHub app does not have access to the code in your repositories. Slack We have a Slack app that can be used to push notifications and interact with the Soluble platform. This can be configured from the Integrations Page . AWS You can delegate IAM permissions with the Security Audit role in order to enable security configuration checks to be run against your AWS accounts. This can be configured from the Integrations Page","title":"Integrations"},{"location":"integration/#integrations","text":"","title":"Integrations"},{"location":"integration/#ci","text":"To install soluble in your CI environment, use the following command, which can be specified as a build step. curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh The CLI will be installed in the current directory with the execute bit set. You are welcome to move it somewhere else, but leaving it in the current directory works well with all of the modern CI platforms. The following is an example for Circle CI: version: 2.1 workflows: workflow: jobs: - build: context: my-env-context jobs: build: machine: image: ubuntu-1604:202010-01 steps: - checkout - run: \"curl -sL https://raw.githubusercontent.com/soluble-ai/soluble-cli/master/linux-install.sh | sh\" - run: \"soluble tf-scan tfsec --upload\" - run: \"soluble tf-scan checkov --upload\" - run: \"soluble secrets-scan --upload\" In order to communicate with the Soluble Fusion platform, the CLI needs an API token, which it expects to find in ~/.soluble/cli-config.json . The file will typically look something like this: { \"Profiles\": { \"default\": { \"APIServer\": \"https://api.soluble.cloud\", \"APIToken\": \"<SOLUBLE_API_TOKEN>\", \"TLSNoVerify\": false, \"Organization\": \"<SOLUBLE_ORG_ID>\", \"Email\": \"email@example.com\", \"DefaultClusterID\": \"\" } }, \"CurrentProfile\": \"default\", \"ModelLocations\": null } You have two choices to configure this: 1) Set SOLUBLE_API_TOKEN and SOLUBLE_ORG_ID as secrets in your CI platform. When you run the installation curl command above, ~/.soluble/cli-config.json will be configured automatically. In the example above, with Circle CI, these values were stored in a Context named my-env-context . If you are using GitHub Actions, you can use GitHub Secrets . There is no magic here. When the CLI is installed, it just uses these values to write its configuration file. or 2) If you want to handle this yourself, just make sure that cli-config.json is distributed and placed in ~/.soluble/cli-config.json using your preferred mechanism for this kind of thing.","title":"CI"},{"location":"integration/#github-actions","text":"We have some first-class support for GitHub Actions. Contact us for details.","title":"GitHub Actions"},{"location":"integration/#circle-ci-jenkins-gitlabl-buildkite-tekton-etc","text":"The instructions above should be sufficient in most cases. The Soluble CLI will extract the CI platform-specific environment variables for relevant contextual data (Git commit, Git branch, CI pipeline name, etc) and send that metadata to the Fusion platform. If you are interested in a Circle CI Orb or other first-class support for CI integration, let us know.","title":"Circle CI, Jenkins, GitLabl, Buildkite, Tekton etc."},{"location":"integration/#source-control","text":"","title":"Source Control"},{"location":"integration/#github","text":"If you have the official GitHub CLI installed and configured on your machine, you can use its credentials to crawl all of the repos available to you. It will clone each of the available repos, identifiy where there IaC in those repos and send that metadata back to Soluble. soluble inventory github If you aren't using GitHub or don't have that capability available to you, you can run the inventory on a repo-by-repo basis by running the following from a cloned git repo: soluble inventory local","title":"GitHub"},{"location":"integration/#soluble-github-app","text":"We provide a GitHub App that can be installed to your GitHub organization. This app allows the CLI to post status checks to GitHub PRs from CI. To in install the app: Log in to Soluble Go to https://github.com/apps/soluble-fusion and follow the instructions Once installed you can add soluble build update-pr to your CI job that performs the assessments. The CLI will obtain an ephemeral token, and post status checks to the GitHub pull request, if one exists. Note: This GitHub app does not have access to the code in your repositories.","title":"Soluble GitHub App"},{"location":"integration/#slack","text":"We have a Slack app that can be used to push notifications and interact with the Soluble platform. This can be configured from the Integrations Page .","title":"Slack"},{"location":"integration/#aws","text":"You can delegate IAM permissions with the Security Audit role in order to enable security configuration checks to be run against your AWS accounts. This can be configured from the Integrations Page","title":"AWS"},{"location":"pipelines/","text":"CI/CD Pipelines TBD","title":"CI/CD Pipelines"},{"location":"pipelines/#cicd-pipelines","text":"TBD","title":"CI/CD Pipelines"},{"location":"policies/","text":"Policies TBD Policy Management TBD Policy Suppression TBD","title":"Policies"},{"location":"policies/#policies","text":"TBD","title":"Policies"},{"location":"policies/#policy-management","text":"TBD","title":"Policy Management"},{"location":"policies/#policy-suppression","text":"TBD","title":"Policy Suppression"},{"location":"reference/","text":"Reference User Management Every user signed up for Soluble is tied to an organization. The first user from the organization sets up an account and has the ability to invite other people to his organization and can be assigned a role ( Owner , Write and Read ). Each invited user will be part of the organization they are invited to and they can also join a default organization of his own, so they can explore Soluble on their own. Invite user Under settings , press Users . Under the Users, press Invite . Provide the email address of the person whom you would like to invite to your organization and select a role from the dropdown. User roles explained below. Press Invite Roles Each user role is specific to that particular organization where it was applied. Owner - The user who created the initial account for the organization is the Owner. The Owner will have access to all the functionalities in that particular organization. They have the permission to grant / revoke permissions to the other users in the organization. Write - The user has the permissions for reading and writing any entities in the organization except for Users and Billing . Read - The user has permissions to read anything in the organization. Tokens Soluble Tokens are of two types: Access tokens - These are used for integrating Soluble with other party tools, such as Soluble CLI etc. Agent tokens - These are used by Soluble agents deployed in Kubernetes clusters. Generating Access token To generate an access token Under Settings , press Tokens . Under the access tokens, click on Generate Access Token . Agent Tokens All the agent tokens used by Soluble agents for kubernetes should be visible under the Agent tokens. Token Management Any user with the right permissions will be able to Disable or Revoke tokens. Organization Setup The owner of the organization can configure the Organization settings, like the display name of the organization, Login provider for organization. Organization ID is provided by the Soluble itself, and users are not able to edit them. Alerts Alerts provide an easy way to handle any issues identified by the Soluble Fusion platform. Alerts can be created for the failed findings from the assessments from a finding's action Soluble, when integrated with other third party platforms like Slack, Jira., provides an easy way to manage the security / configuration issues identified by Soluble, and automates Jira ticket creation with just a click of a button and Slack notification. Dashboard The Soluble dashboard provides an easy way for tracking, analyzing and displaying key information, which helps you to monitor the security / configuration issues in your infrastructure. Integrations Soluble provides an easy way to integrate with third party tools like Slack Jira AWS kubernetes To integrate with the above tools, click on the Integrations sidebar navigation. Slack Soluble can be integrated with just a click of a button. Configuring Slack with Soluble: Navigate to Integrations page and click on Slack Tile Configure button. Jira You need a Jira API token for this. Enter the following Jira details to finish the integration. URL - Domain of the Jira URL of your organization. Username - Jira username of the provided api token. Key - API token created above. Default Project - Provides the default project that can be used by Soluble to create Jira tickets for Soluble alerts. AWS Soluble can be integrated with AWS by running a simple script. Adding an AWS Account: Under the Integrations side menu, click on the AWS tile. Click on the Add Account button and copy the command provided and run it in your terminal. Config Each git repository can have a configuration file named .soluble/config.yml in the root of the repository. This file is sent along with the asessments and can control how Soluble Fusion behaves. The following describes the configuration options available in this file: Ignore Files The ignore directive takes a list of strings, which are interpreted using gitignore syntax. Example: ignore: - \"test/**\" - \"some-other-file\" Note: Currently this directive only applies to assessments uploaded to Soluble Fusion. The ignore directive will not be applied to local CLI output. Suppress Findings The suppress directive takes a list of strings that are matched against the sid for a particular finding. suppress: - \"sid-1\" - \"sid-2\" Note that you can also suppress findings from the UI. Note: Currently this directive only applies to assessments uploaded to Soluble Fusion. The suppress directive will not be applied to local CLI output.","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#user-management","text":"Every user signed up for Soluble is tied to an organization. The first user from the organization sets up an account and has the ability to invite other people to his organization and can be assigned a role ( Owner , Write and Read ). Each invited user will be part of the organization they are invited to and they can also join a default organization of his own, so they can explore Soluble on their own.","title":"User Management"},{"location":"reference/#invite-user","text":"Under settings , press Users . Under the Users, press Invite . Provide the email address of the person whom you would like to invite to your organization and select a role from the dropdown. User roles explained below. Press Invite","title":"Invite user"},{"location":"reference/#roles","text":"Each user role is specific to that particular organization where it was applied. Owner - The user who created the initial account for the organization is the Owner. The Owner will have access to all the functionalities in that particular organization. They have the permission to grant / revoke permissions to the other users in the organization. Write - The user has the permissions for reading and writing any entities in the organization except for Users and Billing . Read - The user has permissions to read anything in the organization.","title":"Roles"},{"location":"reference/#tokens","text":"Soluble Tokens are of two types: Access tokens - These are used for integrating Soluble with other party tools, such as Soluble CLI etc. Agent tokens - These are used by Soluble agents deployed in Kubernetes clusters.","title":"Tokens"},{"location":"reference/#generating-access-token","text":"To generate an access token Under Settings , press Tokens . Under the access tokens, click on Generate Access Token .","title":"Generating Access token"},{"location":"reference/#agent-tokens","text":"All the agent tokens used by Soluble agents for kubernetes should be visible under the Agent tokens.","title":"Agent Tokens"},{"location":"reference/#token-management","text":"Any user with the right permissions will be able to Disable or Revoke tokens.","title":"Token Management"},{"location":"reference/#organization-setup","text":"The owner of the organization can configure the Organization settings, like the display name of the organization, Login provider for organization. Organization ID is provided by the Soluble itself, and users are not able to edit them.","title":"Organization Setup"},{"location":"reference/#alerts","text":"Alerts provide an easy way to handle any issues identified by the Soluble Fusion platform. Alerts can be created for the failed findings from the assessments from a finding's action Soluble, when integrated with other third party platforms like Slack, Jira., provides an easy way to manage the security / configuration issues identified by Soluble, and automates Jira ticket creation with just a click of a button and Slack notification.","title":"Alerts"},{"location":"reference/#dashboard","text":"The Soluble dashboard provides an easy way for tracking, analyzing and displaying key information, which helps you to monitor the security / configuration issues in your infrastructure.","title":"Dashboard"},{"location":"reference/#integrations","text":"Soluble provides an easy way to integrate with third party tools like Slack Jira AWS kubernetes To integrate with the above tools, click on the Integrations sidebar navigation.","title":"Integrations"},{"location":"reference/#slack","text":"Soluble can be integrated with just a click of a button. Configuring Slack with Soluble: Navigate to Integrations page and click on Slack Tile Configure button.","title":"Slack"},{"location":"reference/#jira","text":"You need a Jira API token for this. Enter the following Jira details to finish the integration. URL - Domain of the Jira URL of your organization. Username - Jira username of the provided api token. Key - API token created above. Default Project - Provides the default project that can be used by Soluble to create Jira tickets for Soluble alerts.","title":"Jira"},{"location":"reference/#aws","text":"Soluble can be integrated with AWS by running a simple script. Adding an AWS Account: Under the Integrations side menu, click on the AWS tile. Click on the Add Account button and copy the command provided and run it in your terminal.","title":"AWS"},{"location":"reference/#config","text":"Each git repository can have a configuration file named .soluble/config.yml in the root of the repository. This file is sent along with the asessments and can control how Soluble Fusion behaves. The following describes the configuration options available in this file:","title":"Config"},{"location":"reference/#ignore-files","text":"The ignore directive takes a list of strings, which are interpreted using gitignore syntax. Example: ignore: - \"test/**\" - \"some-other-file\" Note: Currently this directive only applies to assessments uploaded to Soluble Fusion. The ignore directive will not be applied to local CLI output.","title":"Ignore Files"},{"location":"reference/#suppress-findings","text":"The suppress directive takes a list of strings that are matched against the sid for a particular finding. suppress: - \"sid-1\" - \"sid-2\" Note that you can also suppress findings from the UI. Note: Currently this directive only applies to assessments uploaded to Soluble Fusion. The suppress directive will not be applied to local CLI output.","title":"Suppress Findings"}]}